"use client";

import { Button } from "@/components/ui/button";
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSlot,
} from "@/components/ui/input-otp";
import { Loader2 } from "lucide-react";
import Link from "next/link";
import { useSearchParams } from "next/navigation";
// Replace your 'next/navigation' routers with next-nprogress-bar userouter. It's the same router, but this one supports NProgress.
import { Skeleton } from "@/components/ui/skeleton";
import { useToast } from "@/hooks/use-toast";
import { getItem, removeItem, setItem } from "@/lib/localStorage";
import withStepGuard from "@/lib/stepAuthGuard";
import { user2fa } from "@/state/auth/auth.api";
import { useAuthStore } from "@/store/auth";
import { useRouter } from 'next-nprogress-bar';
import QRCode from "qrcode";
import { useEffect, useState } from "react";

interface TwoFactorResponse {
  sharedKey: string;
  recoveryCodesLeft: number;
  recoveryCodes: string | null;
  isTwoFactorEnabled: boolean;
}

const Generate2FA = () => {
  const router = useRouter();
  const searchParams = useSearchParams();
  const email = searchParams.get("email") ?? "";
  const token = getItem("accessToken");
  const [sharedKey, setSharedKey] = useState<string>("");
  const [isLoading, setIsLoading] = useState(false);
  const [qrCodeUrl, setQrCodeUrl] = useState<string>("");
  const [verificationCode, setVerificationCode] = useState<string>("");
  const [isEnabled, setIsEnabled] = useState<boolean>(false);
  const { toast } = useToast();
  const { completeStep } = useAuthStore();

  // Step 1: Call API to generate the 2FA secret
  useEffect(() => {
    if (sharedKey === "") {
      if (token !== null && token !== undefined && token !== "") {
        fetch2FASecret();
      } else {
        console.error("Access token is missing. Please log in.");
        toast({
          title: "Access token is missing. Please log in.",
          variant: "destructive",
        });
        // return;
      }
    }
  }, [sharedKey]);

  const fetch2FASecret = async () => {
    try {
      const response = await user2fa({});
      if (response) {
        const key = response.data.sharedKey;
        setItem("2faSecret", key); // Save to localStorage
        setSharedKey(key);
        // Step 2: Generate the QR code URL from the shared key
        const otpauthUrl = `otpauth://totp/${decodeURIComponent(
          email
        )}?secret=${key}&issuer=Centrix`;
        const qrCode = await QRCode.toDataURL(otpauthUrl);
        setQrCodeUrl(qrCode);
      }
    } catch (error: any) {
      console.error("Error fetching 2FA secret:", error.response || error);
    }
  };
  // Step 3: Function to handle enabling 2FA
  const handleEnable2FA = async () => {
    setIsLoading(true);
    if (!token) {
      toast({
        title: "Access token is missing. Please log in.",
        variant: "destructive",
      });
      return;
    }
    try {
      const response = await user2fa({
        enable: true,
        twoFactorCode: verificationCode, // Use the entered verification code
      });
      setIsEnabled(response?.data?.isTwoFactorEnabled);
      if (response?.data?.recoveryCodes) {
        const codeArr = response?.data?.recoveryCodes ?? [];
        localStorage.setItem("RecoveryCodes", JSON.stringify(codeArr));
        router.push("/backup-codes");
      }
      completeStep('STEP_LOGIN_GENERATE_2FA_SECRET')
      toast({ title: "2FA has been enabled successfully." });
    } catch (error: any) {
      console.error("Error enabling 2FA:", error.response || error);
      error &&
        error?.response?.data?.errors.map((err: any, inx: any) =>
          toast({
            itemID: inx,
            title: err?.name ?? "",
            description: err.reason ?? "Error enabling 2FA:",
            variant: "destructive",
          })
        );
    } finally {
      setIsLoading(false);
      removeItem("2faSecret");
    }
  };

  return (
    <div className="w-full max-w-[90%] md:max-w-[620px] mx-auto space-y-6 flex flex-col justify-center p-6">
      <div className="space-y-2">
        <h1 className="text-3xl font-bold mb-2">Scan QR Code</h1>
        <p className="text-base text-muted-foreground">
          Scan the QR code below using an authenticator app. Enter the 6-digit
          authentication code generated by your authenticator app
        </p>
      </div>
      <div className="mt-8 text-center">
        {qrCodeUrl ? (
          <img
            src={qrCodeUrl}
            alt="2FA QR Code"
            className="border border-[#ddd] p-3 rounded-md mx-auto"
          />
        ) : (
          <Skeleton className="h-[150px] w-[150px] sm:h-[200px] sm:w-[200px] mx-auto" />
        )}{" "}
      </div>
      <div className="flex flex-col items-center justify-center">
        <InputOTP
          maxLength={6}
          onChange={(code) => setVerificationCode(code)}
          inputMode="numeric"
          pattern="[0-9]+"
        >
          <InputOTPGroup>
            <InputOTPSlot index={0} />
            <InputOTPSlot index={1} />
            <InputOTPSlot index={2} />
            <InputOTPSlot index={3} />
            <InputOTPSlot index={4} />
            <InputOTPSlot index={5} />
          </InputOTPGroup>
        </InputOTP>
        <Button
          // className="mt-8 px-20"
          className="py-2 px-14 mt-8 w-full bg-green-600 text-white rounded-md"
          onClick={handleEnable2FA}
          disabled={isLoading || verificationCode === ""}
        >
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Loading...
            </>
          ) : (
            "Verify"
          )}
        </Button>
      </div>
      <div className="flex justify-end mt-3">
        <span className="mr-1 text-xs font-thin text-muted-foreground">
          Back to
        </span>
        <Link
          href="/login"
          className="text-xs text-[#15803d] font-thin hover:underline"
        >
          Login
        </Link>
      </div>
    </div>
  );
};

export default withStepGuard(Generate2FA);
