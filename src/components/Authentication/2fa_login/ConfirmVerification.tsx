"use client";
import { Button } from "@/components/ui/button";
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSlot,
} from "@/components/ui/input-otp";
import { userLogin2fa } from "@/state/auth/auth.api";
import { Loader2 } from "lucide-react";
import Link from "next/link";
import { useRouter } from 'next-nprogress-bar';
import { useEffect, useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { createCookie } from "@/lib/cookieManagment";
import { setItem } from "@/lib/localStorage";
import withStepGuard from "@/lib/stepAuthGuard";
import { useAuthStore } from "@/store/auth";

const AUTH_TOKEN_COOKIE_NAME = "auth-token"
const AUTH_TOKEN_COOKIE_MAX_AGE = 60 * 60 * 24 * 7

function ConfirmVerification() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [verificationCode, setVerificationCode] = useState<string>("");
  const { toast } = useToast();

  const handleEnable2FA = async () => {
    setIsLoading(true);
    try {
      const response = await userLogin2fa({
        twoFactorCode: verificationCode, // Use the entered verification code
      });
      const token = response.data.accessToken;
      if (token) {
        setItem("accessToken", token); // Store token in localStorage
        createCookie(AUTH_TOKEN_COOKIE_NAME, token, 1);
        // toast({ description: "2FA has been enabled successfully." });
        router.push("/phone-numbers");
      }
    } catch (error: any) {
      console.error("Error enabling 2FA:", error.response || error);
      error &&
        error.response?.data?.errors.map((err: any, inx: any) =>
          toast({
            itemID: inx,
            title: err?.name ?? "",
            description: err.reason ?? "Error enabling 2FA, Try Again",
            variant: "destructive",
          })
        );
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="w-full max-w-[90%] md:max-w-[620px] mx-auto space-y-6 flex flex-col justify-center p-6">
      <div className="space-y-2">
        <h1 className="text-3xl font-bold mb-2">Verification Code</h1>
        <p className="text-base text-muted-foreground">
          Enter the 6-digit authentication code generated by your authenticator
          app
        </p>
      </div>
      <div className="flex py-6 flex-col items-center justify-center">
        <InputOTP maxLength={6} onChange={(code) => setVerificationCode(code)} inputMode='numeric' pattern="[0-9]+">
          <InputOTPGroup>
            <InputOTPSlot index={0} />
            <InputOTPSlot index={1} />
            <InputOTPSlot index={2} />
            <InputOTPSlot index={3} />
            <InputOTPSlot index={4} />
            <InputOTPSlot index={5} />
          </InputOTPGroup>
        </InputOTP>
      </div>
      <Button
        className="py-2 px-14 w-full bg-green-600 text-white rounded-md"
        onClick={handleEnable2FA}
        disabled={isLoading}
      >
        {isLoading ? (
          <>
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            Loading...
          </>
        ) : (
          "Verify"
        )}
      </Button>
      <div className="flex justify-end mt-3">
        <span className="mr-1 text-xs font-thin text-muted-foreground">
          Back to
        </span>
        <Link
          href="/login"
          className="text-xs text-[#15803d] font-thin hover:underline"
        >
          Login
        </Link>
      </div>
    </div>
  );
}

// export default ConfirmVerification;
export default withStepGuard(ConfirmVerification);
